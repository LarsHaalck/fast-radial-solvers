#include <Eigen/Dense>
#include "mex.h"

#define DEG  128
#include "sturm_mart.h"
#include "charpoly.h"



using namespace Eigen;

void fast_eigenvector_solver(double * eigv, int neig, Eigen::MatrixXd &AM, Matrix<std::complex<double>,2,128> &sols);



MatrixXcd solver_new_k1fEk2_test_3(const VectorXd& data)
{
	// Compute coefficients
    const double* d = data.data();
    VectorXd coeffs(488);
    coeffs[0] = d[0];
    coeffs[1] = d[1];
    coeffs[2] = d[9];
    coeffs[3] = d[2];
    coeffs[4] = d[10];
    coeffs[5] = d[18];
    coeffs[6] = d[3];
    coeffs[7] = d[11];
    coeffs[8] = d[19];
    coeffs[9] = d[27];
    coeffs[10] = d[4];
    coeffs[11] = d[12];
    coeffs[12] = d[20];
    coeffs[13] = d[28];
    coeffs[14] = d[36];
    coeffs[15] = d[5];
    coeffs[16] = d[13];
    coeffs[17] = d[21];
    coeffs[18] = d[29];
    coeffs[19] = d[37];
    coeffs[20] = d[45];
    coeffs[21] = d[6];
    coeffs[22] = d[14];
    coeffs[23] = d[22];
    coeffs[24] = d[30];
    coeffs[25] = d[38];
    coeffs[26] = d[46];
    coeffs[27] = d[54];
    coeffs[28] = d[7];
    coeffs[29] = d[15];
    coeffs[30] = d[23];
    coeffs[31] = d[31];
    coeffs[32] = d[39];
    coeffs[33] = d[47];
    coeffs[34] = d[55];
    coeffs[35] = d[63];
    coeffs[36] = d[8];
    coeffs[37] = d[16];
    coeffs[38] = d[24];
    coeffs[39] = d[32];
    coeffs[40] = d[40];
    coeffs[41] = d[48];
    coeffs[42] = d[56];
    coeffs[43] = d[64];
    coeffs[44] = d[72];
    coeffs[45] = d[17];
    coeffs[46] = d[25];
    coeffs[47] = d[33];
    coeffs[48] = d[41];
    coeffs[49] = d[49];
    coeffs[50] = d[57];
    coeffs[51] = d[65];
    coeffs[52] = d[73];
    coeffs[53] = d[26];
    coeffs[54] = d[34];
    coeffs[55] = d[42];
    coeffs[56] = d[50];
    coeffs[57] = d[58];
    coeffs[58] = d[66];
    coeffs[59] = d[74];
    coeffs[60] = d[35];
    coeffs[61] = d[43];
    coeffs[62] = d[51];
    coeffs[63] = d[59];
    coeffs[64] = d[67];
    coeffs[65] = d[75];
    coeffs[66] = d[44];
    coeffs[67] = d[52];
    coeffs[68] = d[60];
    coeffs[69] = d[68];
    coeffs[70] = d[76];
    coeffs[71] = d[53];
    coeffs[72] = d[61];
    coeffs[73] = d[69];
    coeffs[74] = d[77];
    coeffs[75] = d[62];
    coeffs[76] = d[70];
    coeffs[77] = d[78];
    coeffs[78] = d[71];
    coeffs[79] = d[79];
    coeffs[80] = d[80];
    coeffs[81] = d[81];
    coeffs[82] = d[82];
    coeffs[83] = d[93];
    coeffs[84] = d[83];
    coeffs[85] = d[94];
    coeffs[86] = d[105];
    coeffs[87] = d[84];
    coeffs[88] = d[95];
    coeffs[89] = d[106];
    coeffs[90] = d[117];
    coeffs[91] = d[85];
    coeffs[92] = d[96];
    coeffs[93] = d[107];
    coeffs[94] = d[118];
    coeffs[95] = d[129];
    coeffs[96] = d[86];
    coeffs[97] = d[97];
    coeffs[98] = d[108];
    coeffs[99] = d[119];
    coeffs[100] = d[130];
    coeffs[101] = d[141];
    coeffs[102] = d[87];
    coeffs[103] = d[98];
    coeffs[104] = d[109];
    coeffs[105] = d[120];
    coeffs[106] = d[131];
    coeffs[107] = d[142];
    coeffs[108] = d[153];
    coeffs[109] = d[88];
    coeffs[110] = d[99];
    coeffs[111] = d[110];
    coeffs[112] = d[121];
    coeffs[113] = d[132];
    coeffs[114] = d[143];
    coeffs[115] = d[154];
    coeffs[116] = d[165];
    coeffs[117] = d[89];
    coeffs[118] = d[100];
    coeffs[119] = d[111];
    coeffs[120] = d[122];
    coeffs[121] = d[133];
    coeffs[122] = d[144];
    coeffs[123] = d[155];
    coeffs[124] = d[166];
    coeffs[125] = d[177];
    coeffs[126] = d[90];
    coeffs[127] = d[101];
    coeffs[128] = d[112];
    coeffs[129] = d[123];
    coeffs[130] = d[134];
    coeffs[131] = d[145];
    coeffs[132] = d[156];
    coeffs[133] = d[167];
    coeffs[134] = d[178];
    coeffs[135] = d[189];
    coeffs[136] = d[91];
    coeffs[137] = d[102];
    coeffs[138] = d[113];
    coeffs[139] = d[124];
    coeffs[140] = d[135];
    coeffs[141] = d[146];
    coeffs[142] = d[157];
    coeffs[143] = d[168];
    coeffs[144] = d[179];
    coeffs[145] = d[190];
    coeffs[146] = d[201];
    coeffs[147] = d[92];
    coeffs[148] = d[103];
    coeffs[149] = d[114];
    coeffs[150] = d[125];
    coeffs[151] = d[136];
    coeffs[152] = d[147];
    coeffs[153] = d[158];
    coeffs[154] = d[169];
    coeffs[155] = d[180];
    coeffs[156] = d[191];
    coeffs[157] = d[202];
    coeffs[158] = d[104];
    coeffs[159] = d[115];
    coeffs[160] = d[126];
    coeffs[161] = d[137];
    coeffs[162] = d[148];
    coeffs[163] = d[159];
    coeffs[164] = d[170];
    coeffs[165] = d[181];
    coeffs[166] = d[192];
    coeffs[167] = d[203];
    coeffs[168] = d[116];
    coeffs[169] = d[127];
    coeffs[170] = d[138];
    coeffs[171] = d[149];
    coeffs[172] = d[160];
    coeffs[173] = d[171];
    coeffs[174] = d[182];
    coeffs[175] = d[193];
    coeffs[176] = d[204];
    coeffs[177] = d[128];
    coeffs[178] = d[139];
    coeffs[179] = d[150];
    coeffs[180] = d[161];
    coeffs[181] = d[172];
    coeffs[182] = d[183];
    coeffs[183] = d[194];
    coeffs[184] = d[205];
    coeffs[185] = d[140];
    coeffs[186] = d[151];
    coeffs[187] = d[162];
    coeffs[188] = d[173];
    coeffs[189] = d[184];
    coeffs[190] = d[195];
    coeffs[191] = d[206];
    coeffs[192] = d[152];
    coeffs[193] = d[163];
    coeffs[194] = d[174];
    coeffs[195] = d[185];
    coeffs[196] = d[196];
    coeffs[197] = d[207];
    coeffs[198] = d[164];
    coeffs[199] = d[175];
    coeffs[200] = d[186];
    coeffs[201] = d[197];
    coeffs[202] = d[208];
    coeffs[203] = d[176];
    coeffs[204] = d[187];
    coeffs[205] = d[198];
    coeffs[206] = d[209];
    coeffs[207] = d[188];
    coeffs[208] = d[199];
    coeffs[209] = d[210];
    coeffs[210] = d[200];
    coeffs[211] = d[211];
    coeffs[212] = d[212];
    coeffs[213] = d[213];
    coeffs[214] = d[214];
    coeffs[215] = d[225];
    coeffs[216] = d[215];
    coeffs[217] = d[226];
    coeffs[218] = d[237];
    coeffs[219] = d[216];
    coeffs[220] = d[227];
    coeffs[221] = d[238];
    coeffs[222] = d[249];
    coeffs[223] = d[217];
    coeffs[224] = d[228];
    coeffs[225] = d[239];
    coeffs[226] = d[250];
    coeffs[227] = d[261];
    coeffs[228] = d[218];
    coeffs[229] = d[229];
    coeffs[230] = d[240];
    coeffs[231] = d[251];
    coeffs[232] = d[262];
    coeffs[233] = d[273];
    coeffs[234] = d[219];
    coeffs[235] = d[230];
    coeffs[236] = d[241];
    coeffs[237] = d[252];
    coeffs[238] = d[263];
    coeffs[239] = d[274];
    coeffs[240] = d[285];
    coeffs[241] = d[220];
    coeffs[242] = d[231];
    coeffs[243] = d[242];
    coeffs[244] = d[253];
    coeffs[245] = d[264];
    coeffs[246] = d[275];
    coeffs[247] = d[286];
    coeffs[248] = d[297];
    coeffs[249] = d[221];
    coeffs[250] = d[232];
    coeffs[251] = d[243];
    coeffs[252] = d[254];
    coeffs[253] = d[265];
    coeffs[254] = d[276];
    coeffs[255] = d[287];
    coeffs[256] = d[298];
    coeffs[257] = d[309];
    coeffs[258] = d[222];
    coeffs[259] = d[233];
    coeffs[260] = d[244];
    coeffs[261] = d[255];
    coeffs[262] = d[266];
    coeffs[263] = d[277];
    coeffs[264] = d[288];
    coeffs[265] = d[299];
    coeffs[266] = d[310];
    coeffs[267] = d[321];
    coeffs[268] = d[223];
    coeffs[269] = d[234];
    coeffs[270] = d[245];
    coeffs[271] = d[256];
    coeffs[272] = d[267];
    coeffs[273] = d[278];
    coeffs[274] = d[289];
    coeffs[275] = d[300];
    coeffs[276] = d[311];
    coeffs[277] = d[322];
    coeffs[278] = d[333];
    coeffs[279] = d[224];
    coeffs[280] = d[235];
    coeffs[281] = d[246];
    coeffs[282] = d[257];
    coeffs[283] = d[268];
    coeffs[284] = d[279];
    coeffs[285] = d[290];
    coeffs[286] = d[301];
    coeffs[287] = d[312];
    coeffs[288] = d[323];
    coeffs[289] = d[334];
    coeffs[290] = d[236];
    coeffs[291] = d[247];
    coeffs[292] = d[258];
    coeffs[293] = d[269];
    coeffs[294] = d[280];
    coeffs[295] = d[291];
    coeffs[296] = d[302];
    coeffs[297] = d[313];
    coeffs[298] = d[324];
    coeffs[299] = d[335];
    coeffs[300] = d[248];
    coeffs[301] = d[259];
    coeffs[302] = d[270];
    coeffs[303] = d[281];
    coeffs[304] = d[292];
    coeffs[305] = d[303];
    coeffs[306] = d[314];
    coeffs[307] = d[325];
    coeffs[308] = d[336];
    coeffs[309] = d[260];
    coeffs[310] = d[271];
    coeffs[311] = d[282];
    coeffs[312] = d[293];
    coeffs[313] = d[304];
    coeffs[314] = d[315];
    coeffs[315] = d[326];
    coeffs[316] = d[337];
    coeffs[317] = d[272];
    coeffs[318] = d[283];
    coeffs[319] = d[294];
    coeffs[320] = d[305];
    coeffs[321] = d[316];
    coeffs[322] = d[327];
    coeffs[323] = d[338];
    coeffs[324] = d[284];
    coeffs[325] = d[295];
    coeffs[326] = d[306];
    coeffs[327] = d[317];
    coeffs[328] = d[328];
    coeffs[329] = d[339];
    coeffs[330] = d[296];
    coeffs[331] = d[307];
    coeffs[332] = d[318];
    coeffs[333] = d[329];
    coeffs[334] = d[340];
    coeffs[335] = d[308];
    coeffs[336] = d[319];
    coeffs[337] = d[330];
    coeffs[338] = d[341];
    coeffs[339] = d[320];
    coeffs[340] = d[331];
    coeffs[341] = d[342];
    coeffs[342] = d[332];
    coeffs[343] = d[343];
    coeffs[344] = d[344];
    coeffs[345] = d[345];
    coeffs[346] = d[346];
    coeffs[347] = d[358];
    coeffs[348] = d[347];
    coeffs[349] = d[359];
    coeffs[350] = d[371];
    coeffs[351] = d[348];
    coeffs[352] = d[360];
    coeffs[353] = d[372];
    coeffs[354] = d[384];
    coeffs[355] = d[349];
    coeffs[356] = d[361];
    coeffs[357] = d[373];
    coeffs[358] = d[385];
    coeffs[359] = d[397];
    coeffs[360] = d[350];
    coeffs[361] = d[362];
    coeffs[362] = d[374];
    coeffs[363] = d[386];
    coeffs[364] = d[398];
    coeffs[365] = d[410];
    coeffs[366] = d[351];
    coeffs[367] = d[363];
    coeffs[368] = d[375];
    coeffs[369] = d[387];
    coeffs[370] = d[399];
    coeffs[371] = d[411];
    coeffs[372] = d[423];
    coeffs[373] = d[352];
    coeffs[374] = d[364];
    coeffs[375] = d[376];
    coeffs[376] = d[388];
    coeffs[377] = d[400];
    coeffs[378] = d[412];
    coeffs[379] = d[424];
    coeffs[380] = d[436];
    coeffs[381] = d[353];
    coeffs[382] = d[365];
    coeffs[383] = d[377];
    coeffs[384] = d[389];
    coeffs[385] = d[401];
    coeffs[386] = d[413];
    coeffs[387] = d[425];
    coeffs[388] = d[437];
    coeffs[389] = d[449];
    coeffs[390] = d[354];
    coeffs[391] = d[366];
    coeffs[392] = d[378];
    coeffs[393] = d[390];
    coeffs[394] = d[402];
    coeffs[395] = d[414];
    coeffs[396] = d[426];
    coeffs[397] = d[438];
    coeffs[398] = d[450];
    coeffs[399] = d[462];
    coeffs[400] = d[355];
    coeffs[401] = d[367];
    coeffs[402] = d[379];
    coeffs[403] = d[391];
    coeffs[404] = d[403];
    coeffs[405] = d[415];
    coeffs[406] = d[427];
    coeffs[407] = d[439];
    coeffs[408] = d[451];
    coeffs[409] = d[463];
    coeffs[410] = d[475];
    coeffs[411] = d[356];
    coeffs[412] = d[368];
    coeffs[413] = d[380];
    coeffs[414] = d[392];
    coeffs[415] = d[404];
    coeffs[416] = d[416];
    coeffs[417] = d[428];
    coeffs[418] = d[440];
    coeffs[419] = d[452];
    coeffs[420] = d[464];
    coeffs[421] = d[476];
    coeffs[422] = d[357];
    coeffs[423] = d[369];
    coeffs[424] = d[381];
    coeffs[425] = d[393];
    coeffs[426] = d[405];
    coeffs[427] = d[417];
    coeffs[428] = d[429];
    coeffs[429] = d[441];
    coeffs[430] = d[453];
    coeffs[431] = d[465];
    coeffs[432] = d[477];
    coeffs[433] = d[370];
    coeffs[434] = d[382];
    coeffs[435] = d[394];
    coeffs[436] = d[406];
    coeffs[437] = d[418];
    coeffs[438] = d[430];
    coeffs[439] = d[442];
    coeffs[440] = d[454];
    coeffs[441] = d[466];
    coeffs[442] = d[478];
    coeffs[443] = d[383];
    coeffs[444] = d[395];
    coeffs[445] = d[407];
    coeffs[446] = d[419];
    coeffs[447] = d[431];
    coeffs[448] = d[443];
    coeffs[449] = d[455];
    coeffs[450] = d[467];
    coeffs[451] = d[479];
    coeffs[452] = d[396];
    coeffs[453] = d[408];
    coeffs[454] = d[420];
    coeffs[455] = d[432];
    coeffs[456] = d[444];
    coeffs[457] = d[456];
    coeffs[458] = d[468];
    coeffs[459] = d[480];
    coeffs[460] = d[409];
    coeffs[461] = d[421];
    coeffs[462] = d[433];
    coeffs[463] = d[445];
    coeffs[464] = d[457];
    coeffs[465] = d[469];
    coeffs[466] = d[481];
    coeffs[467] = d[422];
    coeffs[468] = d[434];
    coeffs[469] = d[446];
    coeffs[470] = d[458];
    coeffs[471] = d[470];
    coeffs[472] = d[482];
    coeffs[473] = d[435];
    coeffs[474] = d[447];
    coeffs[475] = d[459];
    coeffs[476] = d[471];
    coeffs[477] = d[483];
    coeffs[478] = d[448];
    coeffs[479] = d[460];
    coeffs[480] = d[472];
    coeffs[481] = d[484];
    coeffs[482] = d[461];
    coeffs[483] = d[473];
    coeffs[484] = d[485];
    coeffs[485] = d[474];
    coeffs[486] = d[486];
    coeffs[487] = d[487];



	// Setup elimination template
	static const int coeffs0_ind[] = { 0,5,2,86,218,350,1,3,6,10,15,21,91,96,102,223,228,234,360,366,6,10,15,21,28,36,102,109,117,234,241,249,373,381,10,15,21,28,36,109,117,126,241,249,258,381,390,15,21,28,36,117,126,136,249,258,268,390,400,37,18,24,31,39,7,47,54,120,38,129,46,139,252,22,29,12,17,261,30,11,271,393,16,403,23,0,1,81,82,213,214,345,346,0,1,3,81,82,84,213,214,216,346,348,0,1,3,6,82,84,87,214,216,219,348,351,1,5,8,2,86,4,89,0,218,221,350,353,0,1,3,6,10,84,87,91,216,219,223,351,355,3,5,8,12,86,4,89,7,93,218,0,1,221,2,225,353,357,0,1,3,6,10,15,87,91,96,219,223,228,355,360,3,6,10,15,21,28,96,102,109,228,234,241,366,373,4,7,11,16,22,29,97,15,103,21,110,229,1,3,235,10,242,367,374,6,15,5,8,12,17,0,23,30,98,16,104,22,111,230,6,10,2,4,236,11,1,243,368,3,375,7,11,16,22,29,37,45,110,28,118,36,127,242,6,10,250,21,259,382,391,15,16,22,29,37,45,118,36,127,137,250,10,15,259,28,269,391,401,21,21,28,36,126,136,147,258,268,279,400,411,22,29,37,45,127,137,148,259,15,21,269,36,280,401,412,28,46,25,32,40,48,12,55,61,130,47,140,54,151,262,30,38,18,24,272,39,17,283,404,23,415,31,28,36,136,147,268,279,411,422,36,147,279,422,38,46,53,21,149,159,168,281,29,37,291,28,300,424,36,434,45,0,81,213,345,2,9,5,90,222,354 };
	static const int coeffs1_ind[] = { 2,4,0,83,1,85,215,217,347,349,2,4,7,83,1,85,3,88,215,217,0,220,349,352,2,4,7,11,85,3,88,6,92,217,220,1,224,352,356,0,4,9,13,5,90,8,94,2,222,226,354,358,2,4,7,11,16,88,6,92,10,97,220,0,224,3,229,356,361,1,6,5,8,12,17,89,7,93,11,98,221,1,3,225,4,230,357,0,362,2,7,9,13,18,90,8,94,12,99,222,2,4,226,5,231,358,363,8,14,19,9,95,13,100,5,227,232,359,364,2,4,7,11,16,22,92,10,97,15,103,224,0,1,229,6,235,361,367,3,10,5,8,12,17,23,93,11,98,16,104,225,3,6,2,230,7,0,236,362,1,368,4,11,9,13,18,24,94,12,99,17,105,226,4,7,231,8,237,363,2,369,5,12,14,19,25,95,13,100,18,106,227,5,8,232,9,238,364,370,13,20,26,14,101,19,107,9,233,239,365,371,16,9,13,18,24,31,99,17,105,23,112,231,7,11,5,237,12,2,244,369,4,376,8,17,14,19,25,32,100,18,106,24,113,232,8,12,238,13,245,370,5,377,9,18,20,26,33,101,19,107,25,114,233,9,13,239,14,246,371,378,19,27,34,20,108,26,115,14,240,247,372,379,7,11,16,22,29,37,103,21,110,28,118,235,3,6,242,15,250,374,382,10,21,8,12,17,23,1,30,38,104,22,111,29,119,236,10,15,4,7,243,16,3,251,375,6,383,11,22,9,13,18,24,2,31,39,105,23,112,30,120,237,11,16,5,8,244,17,4,252,376,7,384,12,23,14,19,25,32,40,106,24,113,31,121,238,12,17,9,245,18,5,253,377,8,385,13,24,20,26,33,41,107,25,114,32,122,239,13,18,246,19,254,378,9,386,14,25,27,34,42,108,26,115,33,123,240,14,19,247,20,255,379,387,26,35,43,27,116,34,124,20,248,256,380,388,28,12,17,23,30,3,38,46,111,29,119,37,128,243,15,21,7,11,251,22,6,260,383,10,392,16,29,13,18,24,31,4,39,47,112,30,120,38,129,244,16,22,8,12,252,23,7,261,384,11,393,17,30,14,19,25,32,5,40,48,113,31,121,39,130,245,17,23,9,13,253,24,8,262,385,12,394,18,31,20,26,33,41,49,114,32,122,40,131,246,18,24,14,254,25,9,263,386,13,395,19,32,27,34,42,50,115,33,123,41,132,247,19,25,255,26,264,387,14,396,20,33,35,43,51,116,34,124,42,133,248,20,26,256,27,265,388,397,34,44,52,35,125,43,134,27,257,266,389,398,36,17,23,30,38,6,46,53,119,37,128,45,138,251,21,28,11,16,260,29,10,270,392,15,402,22,38,19,25,32,40,8,48,55,121,39,130,47,140,253,23,30,13,18,262,31,12,272,394,17,404,24,39,20,26,33,41,9,49,56,122,40,131,48,141,254,24,31,14,19,263,32,13,273,395,18,405,25,40,27,34,42,50,57,123,41,132,49,142,255,25,32,20,264,33,14,274,396,19,406,26,41,35,43,51,58,124,42,133,50,143,256,26,33,265,34,275,397,20,407,27,42,44,52,59,125,43,134,51,144,257,27,34,266,35,276,398,408,43,44,135,52,145,35,267,277,399,409,23,30,38,46,10,53,128,45,138,149,260,28,36,16,22,270,37,15,281,402,21,413,29,45,24,31,39,47,11,54,60,129,46,139,53,150,261,29,37,17,23,271,38,16,282,403,22,414,30,47,26,33,41,49,13,56,62,131,48,141,55,152,263,31,39,19,25,273,40,18,284,405,24,416,32,48,27,34,42,50,14,57,63,132,49,142,56,153,264,32,40,20,26,274,41,19,285,406,25,417,33,49,35,43,51,58,64,133,50,143,57,154,265,33,41,27,275,42,20,286,407,26,418,34,50,44,52,59,65,134,51,144,58,155,266,34,42,276,43,287,408,27,419,35,51,135,52,145,59,156,267,35,43,277,44,288,409,420,29,37,45,137,148,158,269,21,28,280,290,412,423,36,30,38,46,53,15,138,149,159,270,36,22,29,281,45,21,291,413,28,424,37,31,39,47,54,16,60,139,53,150,160,271,37,45,23,30,282,46,22,292,414,29,425,38,53,32,40,48,55,17,61,66,140,54,151,60,161,272,38,46,24,31,283,47,23,293,415,30,426,39,54,33,41,49,56,18,62,67,141,55,152,61,162,273,39,47,25,32,284,48,24,294,416,31,427,40,55,34,42,50,57,19,63,68,142,56,153,62,163,274,40,48,26,33,285,49,25,295,417,32,428,41,56,35,43,51,58,20,64,69,143,57,154,63,164,275,41,49,27,34,286,50,26,296,418,33,429,42,57,44,52,59,65,70,144,58,155,64,165,276,42,50,35,287,51,27,297,419,34,430,43,58,145,59,156,65,166,277,43,51,288,52,298,420,35,431,44,37,45,148,158,280,28,36,290,423,433,39,47,54,60,22,150,160,169,282,45,30,38,292,53,29,301,425,37,435,46,40,48,55,61,23,66,151,60,161,170,283,46,53,31,39,293,54,30,302,426,38,436,47,60,41,49,56,62,24,67,71,152,61,162,66,171,284,47,54,32,40,294,55,31,303,427,39,437,48,61,42,50,57,63,25,68,72,153,62,163,67,172,285,48,55,33,41,295,56,32,304,428,40,438,49,62,43,51,58,64,26,69,73,154,63,164,68,173,286,49,56,34,42,296,57,33,305,429,41,439,50,63,44,52,59,65,27,70,74,155,64,165,69,174,287,50,57,35,43,297,58,34,306,430,42,440,51,64,156,65,166,70,175,288,51,58,44,298,59,35,307,431,43,441,52,45,158,290,36,433,46,53,28,159,168,291,37,45,300,36,434,443,47,54,60,29,160,169,177,292,38,46,301,37,309,435,45,444,53,48,55,61,66,30,161,170,178,293,53,39,47,302,60,38,310,436,46,445,54,49,56,62,67,31,71,162,66,171,179,294,54,60,40,48,303,61,39,311,437,47,446,55,66,50,57,63,68,32,72,75,163,67,172,71,180,295,55,61,41,49,304,62,40,312,438,48,447,56,67,51,58,64,69,33,73,76,164,68,173,72,181,296,56,62,42,50,305,63,41,313,439,49,448,57,68,52,59,65,70,34,74,77,165,69,174,73,182,297,57,63,43,51,306,64,42,314,440,50,449,58,69,35,166,70,175,74,183,298,58,64,44,52,307,65,43,315,441,51,450,59,53,36,168,300,45,443,54,60,37,169,177,301,46,53,309,45,444,452,55,61,66,38,170,178,185,302,47,54,310,46,317,445,53,453,60,56,62,67,71,39,171,179,186,303,60,48,55,311,66,47,318,446,54,454,61,57,63,68,72,40,75,172,71,180,187,304,61,66,49,56,312,67,48,319,447,55,455,62,71,58,64,69,73,41,76,78,173,72,181,75,188,305,62,67,50,57,313,68,49,320,448,56,456,63,72,59,65,70,74,42,77,79,174,73,182,76,189,306,63,68,51,58,314,69,50,321,449,57,457,64,73,43,175,74,183,77,190,307,64,69,52,59,315,70,51,322,450,58,458,65,60,45,177,309,53,452,61,66,46,178,185,310,54,60,317,53,453,460,62,67,71,47,179,186,192,311,55,61,318,54,324,454,60,461,66,63,68,72,75,48,180,187,193,312,66,56,62,319,71,55,325,455,61,462,67,64,69,73,76,49,78,181,75,188,194,313,67,71,57,63,320,72,56,326,456,62,463,68,75,65,70,74,77,50,79,80,182,76,189,78,195,314,68,72,58,64,321,73,57,327,457,63,464,69,76,51,183,77,190,79,196,315,69,73,59,65,322,74,58,328,458,64,465,70,66,53,185,317,60,460,67,71,54,186,192,318,61,66,324,60,461,467,68,72,75,55,187,193,198,319,62,67,325,61,330,462,66,468,71,69,73,76,78,56,188,194,199,320,71,63,68,326,75,62,331,463,67,469,72,70,74,77,79,57,80,189,78,195,200,321,72,75,64,69,327,76,63,332,464,68,470,73,78,58,190,79,196,80,201,322,73,76,65,70,328,77,64,333,465,69,471,74,71,60,192,324,66,467,72,75,61,193,198,325,67,71,330,66,468,473,73,76,78,62,194,199,203,326,68,72,331,67,335,469,71,474,75,74,77,79,80,63,195,200,204,327,75,69,73,332,78,68,336,470,72,475,76,64,196,80,201,205,328,76,78,70,74,333,79,69,337,471,73,476,77,75,66,198,330,71,473,76,78,67,199,203,331,72,75,335,71,474,478,77,79,80,68,200,204,207,332,73,76,336,72,339,475,75,479,78,69,201,205,208,333,78,74,77,337,80,73,340,476,76,480,79,78,71,203,335,75,478,79,80,72,204,207,336,76,78,339,75,479,482,73,205,208,210,337,77,79,340,76,342,480,78,483,80,80,75,207,339,78,482,76,208,210,340,79,80,342,78,483,485,78,210,342,80,485,2,0,83,215,347,5,14,9,95,227,359,9,20,14,101,233,365,14,27,20,108,240,372,20,35,27,116,248,380,27,44,35,125,257,389,35,44,135,267,399,44,146,278,410,52,146,157,44,278,289,410,421,59,146,157,167,278,44,52,289,299,421,432,65,157,167,176,289,52,59,299,308,432,44,442,70,167,176,184,299,59,65,308,44,316,442,52,451,74,44,176,184,191,308,65,70,316,52,323,451,59,459,77,52,184,191,197,316,70,74,323,59,329,459,65,466,79,59,191,197,202,323,74,77,329,65,334,466,70,472,80,65,197,202,206,329,77,79,334,70,338,472,74,477,70,202,206,209,334,79,80,338,74,341,477,77,481,74,206,209,211,338,80,341,77,343,481,79,484,77,209,211,212,341,343,79,344,484,80,486,79,211,212,343,344,80,486,487,80,212,344,487 };

	static const int C0_ind[] = { 0,7,11,12,21,24,27,28,29,30,32,33,34,36,38,39,44,47,48,50,53,54,55,56,58,59,60,62,64,65,70,73,74,76,79,80,81,82,84,86,88,90,91,96,99,100,102,105,106,107,108,112,114,116,117,122,125,126,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,162,163,166,168,174,177,178,180,186,188,189,190,192,194,195,200,203,204,206,211,212,214,215,216,218,220,221,226,229,230,232,234,240,241,243,244,245,246,249,252,255,256,258,262,263,264,266,267,268,270,272,273,278,281,282,284,286,290,292,293,294,295,296,297,298,299,300,301,304,305,307,308,310,313,314,315,316,318,319,320,322,324,325,330,333,334,336,339,340,341,342,344,345,346,348,350,351,356,359,360,362,365,366,367,368,370,371,372,373,374,375,376,377,380,381,382,383,385,386,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,417,418,419,420,422,423,424,425,426,427,428,429,432,433,434,435,437,438,440,441,443,444,445,446,448,450,451,452,454,455,458,459,460,461,463,464,466,467,469,470,471,476,478,480,481,486,489,490,492,495,496,497,498,502,504,506,507,510,511,512,513,515,516,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,547,548,554,556,559,564,568,570,573,580,585,594,599,600,601,603,606,608,610,611,614,615,616,618,619,620,621,622,623,631,636,645,648,650,657,661,662,671,674 } ;
	static const int C1_ind[] = { 6,7,9,10,11,12,18,21,22,24,30,32,33,34,35,36,37,38,39,44,45,47,48,50,55,56,58,59,60,61,62,63,64,65,70,71,73,74,76,77,78,84,85,87,88,89,90,93,96,99,100,102,106,107,108,110,111,112,113,114,115,116,117,121,122,123,125,126,128,129,130,133,134,136,137,138,139,140,141,142,143,144,145,148,149,151,152,153,154,155,156,160,162,163,164,165,166,167,168,169,170,171,174,175,177,178,180,182,188,189,191,192,193,194,197,200,203,204,206,209,210,211,212,214,215,216,217,218,219,220,221,224,225,226,227,229,230,232,233,234,236,237,238,240,241,242,243,244,245,246,247,248,249,251,252,253,254,255,256,257,258,259,260,263,264,266,267,268,269,270,271,272,273,274,275,278,279,281,282,283,284,285,286,290,292,293,294,295,296,297,298,299,300,301,304,305,307,308,310,312,318,319,321,322,323,324,327,330,333,334,336,338,340,341,342,344,345,346,347,348,349,350,351,352,353,355,356,357,358,359,360,361,362,363,364,367,368,370,371,372,373,374,375,376,377,378,379,382,383,385,386,387,388,389,390,394,396,397,398,399,400,401,402,403,404,405,408,409,411,412,414,416,422,423,425,426,427,428,431,434,437,438,440,443,444,445,446,448,449,450,451,452,453,454,455,458,459,460,461,463,464,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,522,523,524,526,527,528,529,530,531,532,533,534,535,537,538,539,540,541,542,543,544,545,546,549,550,552,553,554,555,556,557,558,559,560,561,564,565,567,568,569,570,571,572,576,578,579,580,581,582,583,584,585,586,587,590,591,593,594,596,598,604,605,607,608,609,610,613,616,619,620,622,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,704,705,706,708,709,710,711,712,713,714,715,716,717,719,720,721,722,723,724,725,726,727,728,731,732,734,735,736,737,738,739,740,741,742,743,746,747,749,750,751,752,753,754,758,760,761,762,763,764,765,766,767,768,769,772,773,775,776,778,780,786,787,789,790,791,792,795,798,801,802,804,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,886,887,888,890,891,892,893,894,895,896,897,898,899,901,902,903,904,905,906,907,908,909,910,913,914,916,917,918,919,920,921,922,923,924,925,928,929,931,932,933,934,935,936,940,942,943,944,945,946,947,948,949,950,951,954,955,957,958,960,962,971,972,973,974,977,980,983,984,986,989,990,991,992,993,994,996,997,998,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1094,1095,1096,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1121,1122,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1136,1137,1139,1140,1141,1142,1143,1144,1152,1153,1154,1155,1156,1157,1158,1159,1162,1163,1165,1166,1168,1171,1172,1173,1178,1180,1182,1183,1186,1187,1188,1191,1192,1194,1195,1197,1198,1199,1200,1201,1204,1206,1208,1209,1210,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1223,1224,1225,1226,1227,1228,1230,1231,1232,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1354,1355,1356,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1386,1387,1388,1389,1390,1391,1392,1393,1396,1397,1399,1400,1401,1402,1403,1405,1406,1412,1414,1417,1420,1421,1422,1426,1428,1431,1432,1433,1434,1435,1438,1440,1442,1443,1444,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1457,1458,1459,1460,1461,1462,1464,1465,1466,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1594,1595,1596,1597,1598,1599,1600,1601,1603,1604,1605,1606,1607,1608,1609,1610,1611,1613,1620,1625,1628,1634,1639,1640,1643,1646,1648,1651,1654,1655,1656,1658,1660,1662,1665,1666,1667,1669,1672,1674,1676,1677,1680,1681,1682,1684,1685,1686,1687,1688,1689,1691,1692,1693,1694,1695,1698,1700,1702,1703,1704,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1717,1718,1719,1720,1721,1722,1724,1725,1726,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1825,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1847,1851,1854,1859,1862,1868,1873,1874,1877,1880,1882,1885,1888,1889,1890,1892,1894,1896,1899,1900,1901,1903,1906,1908,1910,1911,1914,1915,1916,1918,1919,1920,1921,1922,1923,1925,1926,1927,1928,1929,1932,1934,1936,1937,1938,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1951,1952,1953,1954,1955,1956,1958,1959,1960,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2033,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2055,2059,2062,2067,2070,2076,2081,2082,2085,2088,2090,2093,2096,2097,2098,2100,2102,2104,2107,2108,2109,2111,2114,2116,2118,2119,2122,2123,2124,2126,2127,2128,2129,2130,2131,2133,2134,2135,2136,2137,2140,2142,2144,2145,2146,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2159,2160,2161,2162,2163,2164,2166,2167,2168,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2215,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2237,2241,2244,2249,2252,2258,2263,2264,2267,2270,2272,2275,2278,2279,2280,2282,2284,2286,2289,2290,2291,2293,2296,2298,2300,2301,2304,2305,2306,2308,2309,2310,2311,2312,2313,2315,2316,2317,2318,2319,2322,2324,2326,2327,2328,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2341,2342,2343,2344,2345,2346,2348,2349,2350,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2371,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2393,2397,2400,2405,2408,2414,2419,2420,2423,2426,2428,2431,2434,2435,2436,2438,2440,2442,2445,2446,2447,2449,2452,2454,2456,2457,2460,2461,2462,2464,2465,2466,2467,2468,2469,2471,2472,2473,2474,2475,2478,2480,2482,2483,2484,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2501,2504,2505,2506,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2523,2527,2530,2535,2538,2544,2549,2550,2553,2556,2558,2561,2564,2565,2566,2568,2570,2572,2575,2576,2577,2579,2582,2584,2586,2587,2590,2591,2592,2594,2595,2596,2597,2598,2599,2605,2608,2610,2612,2613,2614,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2627,2631,2634,2639,2642,2648,2653,2654,2657,2660,2662,2665,2668,2669,2670,2672,2674,2676,2683,2686,2688,2690,2691,2694,2695,2696,2698,2699,2700,2701,2702,2703,2705,2709,2712,2717,2720,2726,2735,2738,2740,2743,2746,2747,2748,2750,2752,2754,2761,2764,2769,2772,2778,2789,2793,2794,2803,2806,2808,2815,2819,2820,2829,2832,2834,2841,2845,2846,2855,2858,2860,2867,2871,2872,2881,2884,2886,2893,2897,2898,2907,2910,2912,2919,2923,2924,2933,2936,2938,2949,2950,2959,2962,2964,2976,2985,2988,2990,3000,3002,3005,3008,3011,3012,3014,3016,3024,3026,3028,3029,3030,3031,3034,3037,3038,3040,3042,3050,3052,3054,3055,3056,3057,3060,3063,3064,3065,3066,3068,3076,3078,3080,3081,3082,3083,3086,3088,3089,3090,3091,3092,3094,3099,3102,3104,3106,3107,3108,3109,3112,3114,3115,3116,3117,3118,3120,3125,3128,3130,3132,3133,3134,3135,3138,3140,3141,3142,3143,3144,3146,3151,3154,3156,3158,3159,3160,3161,3164,3166,3167,3168,3169,3170,3172,3177,3180,3182,3184,3185,3186,3187,3190,3192,3193,3194,3195,3196,3203,3206,3208,3210,3211,3212,3213,3216,3218,3219,3220,3221,3222,3229,3232,3234,3236,3237,3238,3242,3244,3245,3246,3247,3248,3255,3258,3260,3262,3263,3268,3270,3271,3272,3273,3274,3281,3284,3286,3289,3294,3296,3298,3300,3307,3310,3315,3324 };

	MatrixXd C0 = MatrixXd::Zero(26,26);
	MatrixXd C1 = MatrixXd::Zero(26,128);
	for (int i = 0; i < 362; i++) { C0(C0_ind[i]) = coeffs(coeffs0_ind[i]); }
	for (int i = 0; i < 2174; i++) { C1(C1_ind[i]) = coeffs(coeffs1_ind[i]); } 

	MatrixXd C12 = C0.partialPivLu().solve(C1);



	// Setup action matrix
	// Matrix<double,148, 128> RR;
    MatrixXd RR(148, 128);	
	RR << -C12.bottomRows(20), Matrix<double,128,128>::Identity(128, 128);

	static const int AM_ind[] = { 0,1,2,3,4,22,5,23,6,24,25,26,27,29,30,31,32,7,8,9,33,34,35,36,37,38,39,40,41,42,43,10,45,46,47,48,49,50,11,51,52,53,54,55,56,12,13,58,59,14,60,61,62,63,15,66,67,68,69,70,71,72,16,74,17,75,76,77,78,79,80,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,99,100,101,102,103,104,106,107,108,109,110,112,113,114,115,117,118,119,121,122,124,18,19,128,129,130,131,132,133,57,64,73,81,90,98,105,111,116,120,123,125,126 };
	// Matrix<double, 128, 128> AM;
    MatrixXd AM(128, 128);
	for (int i = 0; i < 128; i++) {
		AM.row(i) = RR.row(AM_ind[i]);
	}

	Matrix<std::complex<double>, 2, 128> sols;
	sols.setZero();

	// Solve eigenvalue problem


	double p[1+128];
	// Matrix<double, 128, 128> AMp = AM;
    MatrixXd AMp = AM;
	charpoly_danilevsky_piv(AMp, p);	
	double roots[128];
	int nroots;
	// find_real_roots_sturm(p, 128, roots, &nroots, 8, 0);
    nroots = realRoots (p, roots);
	fast_eigenvector_solver(roots, nroots, AM, sols);



	return sols;
}
// Action =  x
// Quotient ring basis (V) = x^9*y^12,x^9*y^11,x^9*y^10,x^7*y^12,x^9*y^9,x^8*y^10,x^7*y^11,x^6*y^12,x^9*y^8,x^8*y^9,x^7*y^10,x^6*y^11,x^5*y^12,x^7*y^9,x^6*y^10,x^5*y^11,x^4*y^12,x^9*y^6,x^8*y^7,x^7*y^8,x^6*y^9,x^5*y^10,x^4*y^11,x^3*y^12,x^8*y^6,x^7*y^7,x^6*y^8,x^5*y^9,x^4*y^10,x^3*y^11,x^2*y^12,x^8*y^5,x^6*y^7,x^5*y^8,x^4*y^9,x^3*y^10,x^2*y^11,x*y^12,x^8*y^4,x^7*y^5,x^5*y^7,x^4*y^8,x^3*y^9,x^2*y^10,x*y^11,x^9*y^2,x^8*y^3,x^7*y^4,x^6*y^5,x^5*y^6,x^4*y^7,x^3*y^8,x^2*y^9,x*y^10,x^9*y,x^7*y^3,x^6*y^4,x^5*y^5,x^4*y^6,x^3*y^7,x^2*y^8,x*y^9,x^9,x^8*y,x^7*y^2,x^6*y^3,x^5*y^4,x^4*y^5,x^3*y^6,x^2*y^7,x*y^8,x^8,x^7*y,x^6*y^2,x^5*y^3,x^4*y^4,x^3*y^5,x^2*y^6,x*y^7,x^7,x^6*y,x^5*y^2,x^4*y^3,x^3*y^4,x^2*y^5,x*y^6,x^6,x^5*y,x^4*y^2,x^3*y^3,x^2*y^4,x*y^5,x^5,x^4*y,x^3*y^2,x^2*y^3,x*y^4,x^4,x^3*y,x^2*y^2,x*y^3,x^3,x^2*y,x*y^2,x^2,x*y,x,x^9*y^13,x^6*y^13,x^5*y^13,x^4*y^13,x^3*y^13,x^2*y^13,x*y^13,y^13,y^12,y^11,y^10,y^9,y^8,y^7,y^6,y^5,y^4,y^3,y^2,y,1,
// Available monomials (RR*V) = x^10*y^12,x^10*y^11,x^10*y^10,x^8*y^12,x^10*y^9,x^8*y^11,x^10*y^8,x^10*y^6,x^9*y^7,x^8*y^8,x^9*y^5,x^9*y^4,x^10*y^2,x^9*y^3,x^6*y^6,x^10*y,x^10,x^8*y^2,x^10*y^13,x^7*y^13,x^9*y^12,x^9*y^11,x^9*y^10,x^7*y^12,x^9*y^9,x^8*y^10,x^7*y^11,x^6*y^12,x^9*y^8,x^8*y^9,x^7*y^10,x^6*y^11,x^5*y^12,x^7*y^9,x^6*y^10,x^5*y^11,x^4*y^12,x^9*y^6,x^8*y^7,x^7*y^8,x^6*y^9,x^5*y^10,x^4*y^11,x^3*y^12,x^8*y^6,x^7*y^7,x^6*y^8,x^5*y^9,x^4*y^10,x^3*y^11,x^2*y^12,x^8*y^5,x^6*y^7,x^5*y^8,x^4*y^9,x^3*y^10,x^2*y^11,x*y^12,x^8*y^4,x^7*y^5,x^5*y^7,x^4*y^8,x^3*y^9,x^2*y^10,x*y^11,x^9*y^2,x^8*y^3,x^7*y^4,x^6*y^5,x^5*y^6,x^4*y^7,x^3*y^8,x^2*y^9,x*y^10,x^9*y,x^7*y^3,x^6*y^4,x^5*y^5,x^4*y^6,x^3*y^7,x^2*y^8,x*y^9,x^9,x^8*y,x^7*y^2,x^6*y^3,x^5*y^4,x^4*y^5,x^3*y^6,x^2*y^7,x*y^8,x^8,x^7*y,x^6*y^2,x^5*y^3,x^4*y^4,x^3*y^5,x^2*y^6,x*y^7,x^7,x^6*y,x^5*y^2,x^4*y^3,x^3*y^4,x^2*y^5,x*y^6,x^6,x^5*y,x^4*y^2,x^3*y^3,x^2*y^4,x*y^5,x^5,x^4*y,x^3*y^2,x^2*y^3,x*y^4,x^4,x^3*y,x^2*y^2,x*y^3,x^3,x^2*y,x*y^2,x^2,x*y,x,x^9*y^13,x^6*y^13,x^5*y^13,x^4*y^13,x^3*y^13,x^2*y^13,x*y^13,y^13,y^12,y^11,y^10,y^9,y^8,y^7,y^6,y^5,y^4,y^3,y^2,y,1,


void fast_eigenvector_solver(double * eigv, int neig, Eigen::MatrixXd &AM, Matrix<std::complex<double>,2,128> &sols) {
	static const int ind[] = { 0,1,2,3,4,6,8,17,18,19,31,38,45,46,49,54,62,64,107,108 };	
	// Truncated action matrix containing non-trivial rows
	Matrix<double, 20, 128> AMs;
	double zi[10];
	
	for (int i = 0; i < 20; i++)	{
		AMs.row(i) = AM.row(ind[i]);
	}
	for (int i = 0; i < neig; i++) {
		zi[0] = eigv[i];
		for (int j = 1; j < 10; j++)
		{
			zi[j] = zi[j - 1] * eigv[i];
		}
		Matrix<double, 20,14> AA;
        AA.col(0) = zi[8] * AMs.col(107) + zi[5] * AMs.col(108) + zi[4] * AMs.col(109) + zi[3] * AMs.col(110) + zi[2] * AMs.col(111) + zi[1] * AMs.col(112) + zi[0] * AMs.col(113) + AMs.col(114);
        AA.col(1) = zi[8] * AMs.col(0) + zi[6] * AMs.col(3) + zi[5] * AMs.col(7) + zi[4] * AMs.col(12) + zi[3] * AMs.col(16) + zi[2] * AMs.col(23) + zi[1] * AMs.col(30) + zi[0] * AMs.col(37) + AMs.col(115);
        AA.col(2) = zi[8] * AMs.col(1) + zi[6] * AMs.col(6) + zi[5] * AMs.col(11) + zi[4] * AMs.col(15) + zi[3] * AMs.col(22) + zi[2] * AMs.col(29) + zi[1] * AMs.col(36) + zi[0] * AMs.col(44) + AMs.col(116);
        AA.col(3) = zi[8] * AMs.col(2) + zi[7] * AMs.col(5) + zi[6] * AMs.col(10) + zi[5] * AMs.col(14) + zi[4] * AMs.col(21) + zi[3] * AMs.col(28) + zi[2] * AMs.col(35) + zi[1] * AMs.col(43) + zi[0] * AMs.col(53) + AMs.col(117);
        AA.col(4) = zi[8] * AMs.col(4) + zi[7] * AMs.col(9) + zi[6] * AMs.col(13) + zi[5] * AMs.col(20) + zi[4] * AMs.col(27) + zi[3] * AMs.col(34) + zi[2] * AMs.col(42) + zi[1] * AMs.col(52) + zi[0] * AMs.col(61) + AMs.col(118);
        AA.col(5) = zi[8] * AMs.col(8) + zi[6] * AMs.col(19) + zi[5] * AMs.col(26) + zi[4] * AMs.col(33) + zi[3] * AMs.col(41) + zi[2] * AMs.col(51) + zi[1] * AMs.col(60) + zi[0] * AMs.col(70) + AMs.col(119);
        AA.col(6) = zi[7] * AMs.col(18) + zi[6] * AMs.col(25) + zi[5] * AMs.col(32) + zi[4] * AMs.col(40) + zi[3] * AMs.col(50) + zi[2] * AMs.col(59) + zi[1] * AMs.col(69) + zi[0] * AMs.col(78) + AMs.col(120);
        AA.col(7) = zi[8] * AMs.col(17) + zi[7] * AMs.col(24) + zi[4] * AMs.col(49) + zi[3] * AMs.col(58) + zi[2] * AMs.col(68) + zi[1] * AMs.col(77) + zi[0] * AMs.col(85) + AMs.col(121);
        AA.col(8) = zi[7] * AMs.col(31) + zi[6] * AMs.col(39) + zi[5] * AMs.col(48) + zi[4] * AMs.col(57) + zi[3] * AMs.col(67) + zi[2] * AMs.col(76) + zi[1] * AMs.col(84) + zi[0] * AMs.col(91) + AMs.col(122);
        AA.col(9) = zi[7] * AMs.col(38) + zi[6] * AMs.col(47) + zi[5] * AMs.col(56) + zi[4] * AMs.col(66) + zi[3] * AMs.col(75) + zi[2] * AMs.col(83) + zi[1] * AMs.col(90) + zi[0] * AMs.col(96) + AMs.col(123);
        AA.col(10) = zi[7] * AMs.col(46) + zi[6] * AMs.col(55) + zi[5] * AMs.col(65) + zi[4] * AMs.col(74) + zi[3] * AMs.col(82) + zi[2] * AMs.col(89) + zi[1] * AMs.col(95) + zi[0] * AMs.col(100) + AMs.col(124);
        AA.col(11) = zi[8] * AMs.col(45) + zi[6] * AMs.col(64) + zi[5] * AMs.col(73) + zi[4] * AMs.col(81) + zi[3] * AMs.col(88) + zi[2] * AMs.col(94) + zi[1] * AMs.col(99) + zi[0] * AMs.col(103) + AMs.col(125);
        AA.col(12) = zi[8] * AMs.col(54) + zi[7] * AMs.col(63) + zi[6] * AMs.col(72) + zi[5] * AMs.col(80) + zi[4] * AMs.col(87) + zi[3] * AMs.col(93) + zi[2] * AMs.col(98) + zi[1] * AMs.col(102) + zi[0] * AMs.col(105) + AMs.col(126);
        AA.col(13) = zi[8] * AMs.col(62) + zi[7] * AMs.col(71) + zi[6] * AMs.col(79) + zi[5] * AMs.col(86) + zi[4] * AMs.col(92) + zi[3] * AMs.col(97) + zi[2] * AMs.col(101) + zi[1] * AMs.col(104) + zi[0] * AMs.col(106) + AMs.col(127);
        
        //AA(18,0) = AA(18,0) - zi[9];
        //AA(19,1) = AA(19,1) - zi[6];
        //AA(0,2) = AA(0,2) - zi[9];
        //AA(3,3) = AA(3,3) - zi[7];
        //AA(1,4) = AA(1,4) - zi[9];
        //AA(5,5) = AA(5,5) - zi[7];
        //AA(2,6) = AA(2,6) - zi[9];
        //AA(4,7) = AA(4,7) - zi[9];
        //AA(6,8) = AA(6,8) - zi[9];
        //AA(9,9) = AA(9,9) - zi[7];
        //AA(8,10) = AA(8,10) - zi[8];
        //AA(7,11) = AA(7,11) - zi[9];
        //AA(14,12) = AA(14,12) - zi[5];
        //AA(10,13) = AA(10,13) - zi[8];

        AA(0,1) = AA(0,1) - zi[9];
        AA(1,2) = AA(1,2) - zi[9];
        AA(2,3) = AA(2,3) - zi[9];
        AA(3,1) = AA(3,1) - zi[7];
        AA(4,4) = AA(4,4) - zi[9];
        AA(5,2) = AA(5,2) - zi[7];
        AA(6,5) = AA(6,5) - zi[9];
        AA(7,7) = AA(7,7) - zi[9];
        AA(8,6) = AA(8,6) - zi[8];
        AA(9,5) = AA(9,5) - zi[7];
        AA(10,8) = AA(10,8) - zi[8];
        AA(11,9) = AA(11,9) - zi[8];
        AA(12,11) = AA(12,11) - zi[9];
        AA(13,10) = AA(13,10) - zi[8];
        AA(14,7) = AA(14,7) - zi[5];
        AA(15,12) = AA(15,12) - zi[9];
        AA(16,13) = AA(16,13) - zi[9];
        AA(17,11) = AA(17,11) - zi[7];
        AA(18,0) = AA(18,0) - zi[9];
        AA(19,0) = AA(19,0) - zi[6];
        
        
        
        
        

		Matrix<double, 13, 1>  s = AA.leftCols(13).colPivHouseholderQr().solve(-AA.col(13));
        sols(0,i) = zi[0];
        sols(1,i) = s(12);

	}
}



void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
	if (nrhs != 1) {
		mexErrMsgIdAndTxt("automatic_generator_cvpr:new_k1fEk2_test_3:nrhs", "One input required.");
	}
	if (nlhs != 1) {
		mexErrMsgIdAndTxt("automatic_generator_cvpr:new_k1fEk2_test_3:nlhs", "One output required.");
	}    
	if (!mxIsDouble(prhs[0]) || mxIsComplex(prhs[0])) {
		mexErrMsgIdAndTxt("automatic_generator_cvpr:new_k1fEk2_test_3:notDouble", "Input data must be type double.");
	}
	if(mxGetNumberOfElements(prhs[0]) % 488 != 0) {
		mexErrMsgIdAndTxt("automatic_generator_cvpr:new_k1fEk2_test_3:incorrectSize", "Input size must be multiple of 488.");
	}
	int n_instances = mxGetNumberOfElements(prhs[0]) / 488;
	double *input = mxGetPr(prhs[0]);
	plhs[0] = mxCreateDoubleMatrix(2,128*n_instances,mxCOMPLEX);
	double* zr = mxGetPr(plhs[0]);
	double* zi = mxGetPi(plhs[0]);
	for(int k = 0; k < n_instances; k++) {
		const VectorXd data = Map<const VectorXd>(input + k*488, 488);
		MatrixXcd sols = solver_new_k1fEk2_test_3(data);
		Index offset = k*sols.size();
		for (Index i = 0; i < sols.size(); i++) {
			zr[i+offset] = sols(i).real();
			zi[i+offset] = sols(i).imag();
		}
	}
}


