#include <Eigen/Dense>
#include "mex.h"

#define DEG  52
#include "sturm_mart.h"
#include "charpoly.h"



using namespace Eigen;

void fast_eigenvector_solver(double * eigv, int neig, Eigen::MatrixXd &AM, Matrix<std::complex<double>,2,52> &sols);



MatrixXcd solver_nw_kfEf_sturm(const VectorXd& data)
{
	// Compute coefficients
    const double* d = data.data();
    VectorXd coeffs(84);
    coeffs[0] = d[0];
    coeffs[1] = d[1];
    coeffs[2] = d[6];
    coeffs[3] = d[2];
    coeffs[4] = d[7];
    coeffs[5] = d[12];
    coeffs[6] = d[3];
    coeffs[7] = d[8];
    coeffs[8] = d[13];
    coeffs[9] = d[18];
    coeffs[10] = d[4];
    coeffs[11] = d[9];
    coeffs[12] = d[14];
    coeffs[13] = d[19];
    coeffs[14] = d[5];
    coeffs[15] = d[10];
    coeffs[16] = d[15];
    coeffs[17] = d[20];
    coeffs[18] = d[11];
    coeffs[19] = d[16];
    coeffs[20] = d[21];
    coeffs[21] = d[17];
    coeffs[22] = d[22];
    coeffs[23] = d[23];
    coeffs[24] = d[24];
    coeffs[25] = d[25];
    coeffs[26] = d[34];
    coeffs[27] = d[26];
    coeffs[28] = d[35];
    coeffs[29] = d[44];
    coeffs[30] = d[27];
    coeffs[31] = d[36];
    coeffs[32] = d[45];
    coeffs[33] = d[54];
    coeffs[34] = d[28];
    coeffs[35] = d[37];
    coeffs[36] = d[46];
    coeffs[37] = d[55];
    coeffs[38] = d[64];
    coeffs[39] = d[29];
    coeffs[40] = d[38];
    coeffs[41] = d[47];
    coeffs[42] = d[56];
    coeffs[43] = d[65];
    coeffs[44] = d[74];
    coeffs[45] = d[30];
    coeffs[46] = d[39];
    coeffs[47] = d[48];
    coeffs[48] = d[57];
    coeffs[49] = d[66];
    coeffs[50] = d[75];
    coeffs[51] = d[31];
    coeffs[52] = d[40];
    coeffs[53] = d[49];
    coeffs[54] = d[58];
    coeffs[55] = d[67];
    coeffs[56] = d[76];
    coeffs[57] = d[32];
    coeffs[58] = d[41];
    coeffs[59] = d[50];
    coeffs[60] = d[59];
    coeffs[61] = d[68];
    coeffs[62] = d[77];
    coeffs[63] = d[33];
    coeffs[64] = d[42];
    coeffs[65] = d[51];
    coeffs[66] = d[60];
    coeffs[67] = d[69];
    coeffs[68] = d[78];
    coeffs[69] = d[43];
    coeffs[70] = d[52];
    coeffs[71] = d[61];
    coeffs[72] = d[70];
    coeffs[73] = d[79];
    coeffs[74] = d[53];
    coeffs[75] = d[62];
    coeffs[76] = d[71];
    coeffs[77] = d[80];
    coeffs[78] = d[63];
    coeffs[79] = d[72];
    coeffs[80] = d[81];
    coeffs[81] = d[73];
    coeffs[82] = d[82];
    coeffs[83] = d[83];



	// Setup elimination template
	static const int coeffs0_ind[] = { 0,24,1,0,24,25,2,0,24,26,3,1,0,24,25,27,4,2,1,0,24,26,25,28,5,2,0,24,26,29,6,3,1,0,24,25,27,30,7,4,3,2,1,0,26,24,25,28,27,31,8,5,4,2,1,0,25,24,26,29,28,32,9,5,2,0,26,29,33,10,6,3,1,0,25,27,30,34,11,7,6,4,3,2,1,0,26,24,28,25,27,31,30,35,12,8,7,5,4,3,2,1,0,27,25,29,26,24,28,32,31,36,13,9,8,5,4,2,1,0,28,26,29,33,32,37,9,5,2,0,29,33,38,14,10,6,3,1,0,27,30,34,39,15,11,10,7,6,4,3,2,1,0,28,25,31,27,30,35,34,40,13,9,8,5,4,2,1,0,32,29,33,38,37,43,9,5,2,33,38,44,14,10,6,3,1,0,30,34,39,45,18,15,14,11,10,7,6,4,3,2,1,0,31,27,35,30,34,40,39,46,13,9,8,5,4,2,37,33,38,44,43,50,14,10,6,3,1,0,34,39,45,51,18,15,14,11,10,7,6,4,3,2,1,0,35,30,40,34,39,46,45,52,21,19,18,16,15,14,12,11,10,8,7,6,5,4,39,2,34,3,36,1,31,41,35,27,30,0,40,47,46,53,14,10,6,3,1,39,45,51,57,18,15,14,11,10,7,6,4,3,2,1,40,0,34,46,39,45,52,51,58,21,19,18,16,15,14,12,11,10,8,7,45,5,4,39,2,6,41,3,35,0,47,40,30,34,1,46,53,52,59,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,46,5,40,7,42,4,1,36,48,41,0,31,35,3,2,6,47,54,53,60,18,15,14,11,10,7,6,4,3,46,1,39,52,45,51,58,57,64,21,19,18,16,15,14,12,11,51,8,7,45,5,4,10,47,2,6,40,0,1,53,46,34,39,3,52,59,58,65,21,19,18,16,15,57,12,11,51,8,7,14,53,4,10,46,1,3,59,52,39,45,6,58,65,64,70,23,22,21,20,19,64,17,16,58,13,12,18,60,8,15,10,53,4,7,1,66,59,6,46,52,14,11,65,71,70,3,75,14,63,18,69,14,63,23,78,21,74,18,14,69,83,23,21,81,16,12,11,8,7,6,5,4,3,2,1,30,27,0,29,26,32,28,24,25,31,36,35,41,23,22,21,20,19,18,17,16,15,14,13,12,52,9,8,46,5,11,48,7,3,41,2,54,47,1,35,40,6,4,10,53,60,59,0,66,23,22,21,69,20,19,64,17,16,66,12,18,14,59,7,11,3,71,65,10,52,58,15,70,75,74,6,78,17,13,12,9,8,7,4,42,37,44,38,33,5,43,50,49,2,56,82,79,22,23,19,83,81,15,75,78,18,21,23,22,21,19,67,61,13,56,62,9,49,55,17,5,8,20,68,73,16,12,81,79,23,77,17,80,22,12,72,76,16,19,21,82,83,20,17,13,12,9,8,7,5,4,3,2,1,31,28,33,29,26,0,32,37,36,42,17,13,12,9,8,7,5,4,3,1,36,32,38,33,29,2,37,43,42,0,49,14,10,6,3,45,51,57,63,18,15,14,11,10,7,6,52,3,45,58,51,57,64,63,69,23,22,21,20,19,18,15,60,54,17,56,13,8,49,62,55,5,42,48,12,9,2,4,16,61,68,67,11,7,73,21,19,18,63,16,15,57,12,11,59,7,14,52,3,6,65,58,45,51,10,64,70,69,74,9,5,38,44,9,44 };
	static const int coeffs1_ind[] = { 19,16,15,12,11,10,8,7,6,5,4,3,2,34,30,1,32,0,28,36,31,25,27,35,41,40,47,20,17,16,13,12,11,9,8,7,6,5,4,3,35,31,2,33,29,37,32,26,28,0,1,36,42,41,48,22,20,19,17,16,15,13,12,11,10,9,8,7,6,5,40,35,4,37,2,0,32,42,36,28,31,1,3,41,48,47,54,20,17,16,13,12,11,9,8,7,6,3,41,36,5,38,33,43,37,29,32,2,4,42,49,48,1,0,55,22,20,19,17,16,15,13,12,11,10,9,6,47,41,8,43,5,2,37,49,42,32,36,4,0,7,48,55,54,3,1,61,20,17,16,13,12,11,7,48,42,9,44,38,50,43,33,37,5,8,49,56,55,4,2,62,23,22,21,20,19,18,17,16,15,14,13,10,53,9,47,12,49,8,4,42,55,48,2,36,41,7,5,0,1,11,54,61,60,6,3,67,22,20,19,17,16,15,11,54,48,13,50,9,5,43,56,49,37,42,8,2,12,55,62,61,7,4,68,14,10,6,51,57,63,23,22,21,20,19,18,17,16,58,13,12,52,9,8,15,54,5,11,6,47,2,4,0,60,53,3,40,46,10,7,14,59,66,65,1,71,23,22,21,20,19,18,17,14,59,13,53,9,16,55,12,7,48,5,61,54,4,41,47,11,8,0,1,3,15,60,67,66,10,6,2,72,14,10,57,63,18,15,14,11,10,58,6,51,64,57,63,69,23,22,21,20,65,17,59,13,19,61,9,16,11,54,5,8,2,67,60,7,0,47,53,15,12,1,3,6,18,66,72,71,14,10,4,76,23,22,21,18,66,60,20,62,17,12,55,9,68,61,8,48,54,16,13,2,4,7,19,67,73,72,15,11,5,77,18,15,14,64,10,57,69,63,21,19,18,63,16,15,65,11,58,6,10,70,64,51,57,14,69,74,23,22,70,20,65,17,21,67,13,19,15,60,8,12,4,72,66,11,1,53,59,18,16,3,6,10,71,76,75,14,7,79,23,71,66,22,68,20,16,61,9,13,5,73,67,12,2,54,60,19,17,4,7,11,21,72,77,76,18,15,8,80,21,19,18,70,15,64,10,14,74,69,57,63,23,22,21,69,20,19,71,16,65,11,15,6,75,70,14,58,64,18,74,78,10,23,74,22,70,20,72,17,21,18,66,12,16,7,76,71,15,3,59,65,19,6,10,14,75,79,78,11,81,75,71,23,73,22,19,67,13,17,8,77,72,16,4,60,66,21,20,7,11,15,76,80,79,18,12,82,21,74,18,69,14,63,23,22,21,75,19,70,15,18,10,78,74,64,69,14,23,74,22,76,20,71,16,19,11,79,75,18,6,65,70,21,10,14,78,81,15,78,75,77,23,21,72,17,20,12,80,76,19,7,66,71,22,11,15,18,79,82,81,16,83,23,79,22,75,19,21,15,81,78,10,70,74,14,18,78,80,76,20,22,16,82,79,21,11,71,75,23,15,18,81,83,19,81,23,78,21,18,14,74,83,81,23,21,18,78,17,13,12,8,49,43,44,38,9,50,56,5,20,17,16,12,55,49,44,50,38,43,9,13,56,62,8,5,22,20,19,16,61,55,9,50,56,43,49,13,5,17,62,68,12,8,23,21,72,67,17,62,68,13,55,61,20,5,8,12,22,73,77,19,16,9,76,72,20,68,9,73,17,5,61,67,22,8,12,16,23,77,80,21,19,13,79,76,22,73,13,77,20,8,67,72,23,12,16,19,80,82,21,17,81,80,20,82,23,16,76,79,19,21,83,22,82,22,83,19,79,81,21,23,13,9,8,5,43,38,44,50,13,9,50,44,17,13,56,50,44,9,20,17,62,56,44,50,13,9,22,20,68,62,50,56,9,17,13,23,22,73,68,56,62,9,13,20,17,23,77,73,62,68,9,13,17,22,20,80,77,9,68,73,13,17,20,23,22,82,80,13,73,77,17,20,22,23,83,82,17,77,80,20,22,23,83,20,80,82,22,23,22,82,83,23,23,83 };

	static const int C0_ind[] = { 0,51,52,53,98,103,104,106,151,155,156,157,159,189,202,207,208,209,210,212,253,254,255,259,260,262,265,278,307,311,312,313,315,318,337,345,358,363,364,365,366,367,368,371,397,398,409,410,411,415,416,417,418,420,421,424,434,437,461,462,463,467,468,470,473,477,486,515,519,520,521,523,526,530,545,553,566,571,572,573,574,575,576,578,579,583,597,601,605,606,617,618,619,623,624,625,626,627,628,629,631,632,636,642,645,657,658,662,669,670,671,675,676,677,678,680,681,684,685,689,694,697,721,722,723,727,730,733,737,742,746,775,779,780,781,783,786,790,795,805,813,826,831,832,833,834,835,836,838,839,842,843,848,857,861,865,866,877,878,879,883,886,888,889,892,893,897,898,901,902,905,929,930,931,935,941,945,950,954,983,987,989,991,994,998,1003,1007,1013,1021,1034,1039,1040,1041,1042,1043,1044,1046,1047,1050,1051,1055,1056,1060,1065,1069,1073,1074,1085,1086,1087,1091,1097,1100,1101,1105,1106,1109,1110,1113,1137,1138,1139,1143,1147,1150,1154,1159,1163,1166,1169,1177,1190,1195,1197,1199,1200,1202,1203,1206,1207,1211,1212,1215,1216,1219,1221,1225,1229,1230,1241,1242,1243,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1258,1259,1260,1263,1264,1266,1268,1269,1272,1273,1275,1277,1281,1282,1285,1286,1288,1293,1294,1295,1299,1306,1310,1315,1319,1322,1325,1333,1346,1351,1355,1358,1359,1362,1363,1367,1368,1371,1372,1374,1375,1377,1378,1381,1385,1386,1397,1398,1399,1403,1405,1407,1408,1410,1411,1412,1414,1415,1416,1419,1420,1422,1423,1424,1425,1427,1428,1429,1431,1433,1435,1437,1438,1441,1442,1444,1449,1450,1451,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1471,1472,1474,1476,1477,1480,1481,1483,1484,1485,1489,1490,1491,1493,1494,1495,1496,1500,1501,1502,1503,1507,1514,1518,1519,1523,1524,1527,1528,1530,1531,1533,1534,1537,1541,1542,1553,1554,1555,1559,1563,1566,1567,1570,1571,1572,1575,1576,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1589,1590,1591,1593,1594,1597,1598,1600,1605,1606,1607,1611,1618,1622,1623,1627,1628,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1641,1642,1643,1645,1646,1649,1650,1652,1657,1658,1659,1663,1670,1674,1675,1679,1680,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1701,1702,1703,1704,1709,1710,1711,1714,1715,1738,1741,1790,1793,1794,1797,1842,1845,1846,1849,1850,1852,1857,1901,1904,1908,1909,1924,1925,1926,1927,1928,1929,1930,1931,1932,1935,1936,1942,1945,1948,1949,1953,1957,1958,1961,1962,1969,1970,1971,1975,1977,1979,1980,1982,1983,1984,1986,1987,1988,1989,1991,1992,1994,1995,1996,1997,1999,2000,2001,2003,2004,2005,2007,2009,2010,2011,2013,2014,2015,2016,2020,2021,2022,2023,2026,2027,2038,2043,2044,2046,2047,2048,2049,2050,2051,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2065,2066,2068,2073,2074,2075,2078,2079,2085,2088,2089,2092,2093,2094,2097,2098,2101,2113,2114,2118,2124,2125,2126,2127,2128,2131,2157,2161,2162,2163,2164,2165,2166,2168,2169,2170,2173,2182,2193,2197,2198,2201,2202,2205,2212,2213,2218,2219,2221,2222,2223,2226,2227,2228,2229,2231,2232,2233,2254,2257,2264,2265,2268,2270,2271,2272,2273,2274,2277,2278,2279,2281,2283,2286,2288,2289,2290,2291,2292,2293,2295,2296,2297,2300,2301,2306,2309,2321,2322,2326,2332,2333,2334,2335,2339,2342,2344,2345,2347,2348,2349,2352,2353,2354,2357,2358,2361,2373,2374,2378,2384,2385,2386,2387,2388,2391,2402,2407,2411,2414,2417,2425,2438,2443,2454,2459,2460,2463,2464,2466,2467,2469,2470,2473,2477,2478,2489,2490,2491,2495,2501,2504,2505,2508,2509,2510,2513,2514,2517,2520,2521,2523,2524,2525,2529,2530,2531,2533,2534,2535,2536,2538,2539,2540,2541,2542,2543,2544,2545,2547,2558,2563,2564,2566,2567,2568,2569,2570,2571,2573,2574,2575,2577,2578,2579,2581,2582,2585,2586,2588,2593,2594,2595,2599,2609,2614,2618,2647,2666,2670 } ;
	static const int C1_ind[] = { 0,1,2,3,4,5,6,7,8,10,11,12,16,18,21,24,25,27,29,33,34,37,38,45,46,47,51,52,53,54,55,56,57,58,59,60,61,63,64,65,70,73,76,77,81,85,86,89,90,91,96,97,98,99,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,125,128,129,131,132,133,137,138,141,142,143,148,149,150,151,155,158,160,161,163,164,165,167,168,169,170,173,174,177,180,181,185,189,190,193,194,195,200,201,202,203,204,205,207,210,212,213,215,216,217,219,220,221,222,224,225,226,229,232,233,235,236,237,241,242,245,246,247,251,252,253,254,255,256,257,259,265,268,269,272,273,274,277,278,281,284,285,289,293,294,297,298,299,304,305,306,307,308,309,311,314,316,317,319,320,321,323,324,325,326,328,329,330,332,333,336,337,339,340,341,345,346,347,349,350,351,352,354,355,356,357,358,359,360,361,363,369,372,373,376,377,378,381,382,385,388,389,391,392,393,397,398,401,402,403,407,408,409,410,411,412,413,415,431,435,438,441,449,462,471,474,475,478,479,480,483,484,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,505,506,507,508,512,513,514,515,518,519,524,527,528,531,532,533,536,537,538,540,541,543,544,545,547,548,549,551,553,554,555,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,591,594,597,605,639,643,644,646,647,649,650,653,657,658,669,670,683,687,688,692,694,696,697,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,736,740,741,745,746,749,752,753,755,756,757,759,761,762,763,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,799,802,803,805,806,809,813,814,847,851,852,853,854,855,857,858,861,862,863,865,866,869,870,872,877,878,895,900,902,904,905,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,929,930,931,933,934,935,948,954,957,960,961,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,1007,1010,1011,1013,1014,1017,1018,1019,1021,1022,1025,1026,1055,1059,1060,1061,1062,1063,1065,1066,1069,1070,1071,1072,1073,1074,1075,1077,1078,1080,1085,1086,1090,1108,1110,1112,1113,1115,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1132,1133,1134,1135,1137,1138,1139,1142,1143,1162,1165,1168,1169,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1189,1190,1191,1193,1194,1195,1218,1221,1222,1225,1226,1233,1267,1270,1271,1273,1274,1277,1278,1279,1280,1281,1282,1285,1286,1298,1320,1321,1323,1325,1326,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1340,1341,1342,1345,1346,1350,1370,1373,1377,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1392,1393,1394,1395,1397,1398,1399,1402,1403,1427,1429,1430,1433,1434,1435,1436,1437,1438,1440,1441,1442,1445,1454,1477,1481,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1496,1497,1498,1501,1502,1506,1533,1534,1537,1538,1540,1544,1545,1585,1589,1590,1592,1596,1597,1621,1625,1626,1629,1630,1633,1646,1650,1656,1657,1659,1660,1673,1677,1678,1681,1682,1685,1693,1698,1701,1702,1703,1708,1709,1711,1712,1713,1725,1729,1730,1733,1734,1737,1744,1745,1750,1753,1754,1755,1759,1760,1761,1763,1764,1765,1781,1785,1786,1789,1796,1797,1802,1803,1805,1806,1807,1809,1810,1811,1812,1813,1815,1816,1817,1818,1838,1841,1848,1849,1852,1854,1855,1856,1857,1858,1859,1861,1862,1863,1864,1865,1867,1868,1869,1870,1890,1893,1900,1901,1904,1906,1907,1908,1909,1910,1911,1913,1914,1915,1917,1919,1921,1922,1945,1953,1956,1958,1959,1960,1961,1962,1965,1966,1969,1974,2005,2008,2010,2012,2013,2014,2017,2026,2037,2041,2042,2045,2046,2049,2073,2075,2094,2097,2098,2101,2146,2149,2150,2153,2170,2180,2198,2201,2202,2205,2221,2222,2232,2233,2250,2253,2254,2257,2273,2274,2279,2284,2285,2302,2305,2306,2309,2325,2326,2330,2331,2336,2337,2357,2358,2361,2377,2378,2381,2382,2383,2388,2389,2410,2413,2428,2429,2430,2433,2434,2435,2440,2441,2462,2465,2480,2481,2482,2485,2486,2487,2493,2514,2517,2532,2533,2534,2537,2538,2539,2569,2584,2585,2586,2589,2590,2636,2637,2638,2641,2688,2689 };

	MatrixXd C0 = MatrixXd::Zero(52,52);
	MatrixXd C1 = MatrixXd::Zero(52,52);
	for (int i = 0; i < 782; i++) { C0(C0_ind[i]) = coeffs(coeffs0_ind[i]); }
	for (int i = 0; i < 898; i++) { C1(C1_ind[i]) = coeffs(coeffs1_ind[i]); } 

	MatrixXd C12 = C0.partialPivLu().solve(C1);



	// Setup action matrix
	// Matrix<double,67, 52> RR;
    MatrixXd RR(67, 52);	
	RR << -C12.bottomRows(15), Matrix<double,52,52>::Identity(52, 52);

	static const int AM_ind[] = { 0,7,16,8,18,3,19,20,9,1,21,23,10,25,11,27,12,28,29,31,2,32,33,34,35,36,37,40,41,42,4,54,46,47,5,49,50,6,52,13,14,55,56,57,58,59,60,61,62,63,64,65 };
	// Matrix<double, 52, 52> AM;
    MatrixXd AM(52, 52);
	for (int i = 0; i < 52; i++) {
		AM.row(i) = RR.row(AM_ind[i]);
	}

	Matrix<std::complex<double>, 2, 52> sols;
	sols.setZero();

	// Solve eigenvalue problem


	double p[1+52];
	// Matrix<double, 52, 52> AMp = AM;
    MatrixXd AMp = AM;
	charpoly_danilevsky_piv(AMp, p);	
	double roots[52];
	int nroots;
	// find_real_roots_sturm(p, 52, roots, &nroots, 8, 0);
    nroots = realRoots (p, roots);
	fast_eigenvector_solver(roots, nroots, AM, sols);






	return sols;
}
// Action =  y
// Quotient ring basis (V) = x^5*y^8,x^4*y^9,x^4*y^8,x^3*y^9,x^3*y^8,x^2*y^9,x^3*y^7,x^2*y^8,x^7*y^2,x^4*y^5,x^3*y^6,x^7*y,x^6*y^2,x^3*y^5,x^2*y^6,x^6*y,x^5*y^2,x^3*y^4,x^2*y^5,x^5*y,x^4*y^2,x^3*y^3,x^2*y^4,x^5,x^4*y,x^3*y^2,x^2*y^3,x^3*y,x^2*y^2,x^3,x^2,x*y^10,x*y^9,x*y^8,x*y^6,x*y^5,x*y^4,x*y^2,x*y,x*y^11,y^11,y^10,y^9,y^8,y^7,y^6,y^5,y^4,y^3,y^2,y,1,
// Available monomials (RR*V) = x^5*y^9,x^4*y^6,x^4*y^3,x^2*y^10,x^2*y,x*y^7,x*y^3,x^4*y^10,x^3*y^10,x^7*y^3,x^6*y^3,x^2*y^7,x^5*y^3,x*y^12,y^12,x^5*y^8,x^4*y^9,x^4*y^8,x^3*y^9,x^3*y^8,x^2*y^9,x^3*y^7,x^2*y^8,x^7*y^2,x^4*y^5,x^3*y^6,x^7*y,x^6*y^2,x^3*y^5,x^2*y^6,x^6*y,x^5*y^2,x^3*y^4,x^2*y^5,x^5*y,x^4*y^2,x^3*y^3,x^2*y^4,x^5,x^4*y,x^3*y^2,x^2*y^3,x^3*y,x^2*y^2,x^3,x^2,x*y^10,x*y^9,x*y^8,x*y^6,x*y^5,x*y^4,x*y^2,x*y,x*y^11,y^11,y^10,y^9,y^8,y^7,y^6,y^5,y^4,y^3,y^2,y,1,


void fast_eigenvector_solver(double * eigv, int neig, Eigen::MatrixXd &AM, Matrix<std::complex<double>,2,52> &sols) {
	static const int ind[] = { 0,1,3,5,8,9,12,14,16,20,30,34,37,39,40 };	
	// Truncated action matrix containing non-trivial rows
	Matrix<double, 15, 52> AMs;
	double zi[12];
	
	for (int i = 0; i < 15; i++)	{
		AMs.row(i) = AM.row(ind[i]);
	}
	for (int i = 0; i < neig; i++) {
		zi[0] = eigv[i];
		for (int j = 1; j < 12; j++)
		{
			zi[j] = zi[j - 1] * eigv[i];
		}
		Matrix<double, 15,8> AA;
        AA.col(0) = zi[1] * AMs.col(8) + zi[0] * AMs.col(11);
        AA.col(1) = zi[1] * AMs.col(12) + zi[0] * AMs.col(15);
        AA.col(2) = zi[7] * AMs.col(0) + zi[1] * AMs.col(16) + zi[0] * AMs.col(19) + AMs.col(23);
        AA.col(3) = zi[8] * AMs.col(1) + zi[7] * AMs.col(2) + zi[4] * AMs.col(9) + zi[1] * AMs.col(20) + zi[0] * AMs.col(24);
        AA.col(4) = zi[8] * AMs.col(3) + zi[7] * AMs.col(4) + zi[6] * AMs.col(6) + zi[5] * AMs.col(10) + zi[4] * AMs.col(13) + zi[3] * AMs.col(17) + zi[2] * AMs.col(21) + zi[1] * AMs.col(25) + zi[0] * AMs.col(27) + AMs.col(29);
        AA.col(5) = zi[8] * AMs.col(5) + zi[7] * AMs.col(7) + zi[5] * AMs.col(14) + zi[4] * AMs.col(18) + zi[3] * AMs.col(22) + zi[2] * AMs.col(26) + zi[1] * AMs.col(28) + AMs.col(30);
        AA.col(6) = zi[9] * AMs.col(31) + zi[8] * AMs.col(32) + zi[7] * AMs.col(33) + zi[5] * AMs.col(34) + zi[4] * AMs.col(35) + zi[3] * AMs.col(36) + zi[1] * AMs.col(37) + zi[0] * AMs.col(38) + zi[10] * AMs.col(39);
        AA.col(7) = zi[10] * AMs.col(40) + zi[9] * AMs.col(41) + zi[8] * AMs.col(42) + zi[7] * AMs.col(43) + zi[6] * AMs.col(44) + zi[5] * AMs.col(45) + zi[4] * AMs.col(46) + zi[3] * AMs.col(47) + zi[2] * AMs.col(48) + zi[1] * AMs.col(49) + zi[0] * AMs.col(50) + AMs.col(51);
        
        AA(0,2) = AA(0,2) - zi[8];
        AA(1,3) = AA(1,3) - zi[9];
        AA(2,4) = AA(2,4) - zi[9];
        AA(3,5) = AA(3,5) - zi[9];
        AA(4,0) = AA(4,0) - zi[2];
        AA(5,3) = AA(5,3) - zi[5];
        AA(6,1) = AA(6,1) - zi[2];
        AA(7,5) = AA(7,5) - zi[6];
        AA(8,2) = AA(8,2) - zi[2];        
        AA(9,3) = AA(9,3) - zi[2];
        AA(10,5) = AA(10,5) - zi[0];
        AA(11,6) = AA(11,6) - zi[6];
        AA(12,6) = AA(12,6) - zi[2];
        AA(13,6) = AA(13,6) - zi[11];
        AA(14,7) = AA(14,7) - zi[11];
     
       


		Matrix<double, 7, 1>  s = AA.leftCols(7).colPivHouseholderQr().solve(-AA.col(7));
        sols(1,i) = s(6);
        sols(0,i) = zi[0];

	}
}



void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
	if (nrhs != 1) {
		mexErrMsgIdAndTxt("automatic_generator_cvpr:nw_kfEf_sturm:nrhs", "One input required.");
	}
	if (nlhs != 1) {
		mexErrMsgIdAndTxt("automatic_generator_cvpr:nw_kfEf_sturm:nlhs", "One output required.");
	}    
	if (!mxIsDouble(prhs[0]) || mxIsComplex(prhs[0])) {
		mexErrMsgIdAndTxt("automatic_generator_cvpr:nw_kfEf_sturm:notDouble", "Input data must be type double.");
	}
	if(mxGetNumberOfElements(prhs[0]) % 84 != 0) {
		mexErrMsgIdAndTxt("automatic_generator_cvpr:nw_kfEf_sturm:incorrectSize", "Input size must be multiple of 84.");
	}
	int n_instances = mxGetNumberOfElements(prhs[0]) / 84;
	double *input = mxGetPr(prhs[0]);
	plhs[0] = mxCreateDoubleMatrix(2,52*n_instances,mxCOMPLEX);
	double* zr = mxGetPr(plhs[0]);
	double* zi = mxGetPi(plhs[0]);
	for(int k = 0; k < n_instances; k++) {
		const VectorXd data = Map<const VectorXd>(input + k*84, 84);
		MatrixXcd sols = solver_nw_kfEf_sturm(data);
		Index offset = k*sols.size();
		for (Index i = 0; i < sols.size(); i++) {
			zr[i+offset] = sols(i).real();
			zi[i+offset] = sols(i).imag();
		}
	}
}


